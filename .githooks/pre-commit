#!/usr/bin/env bash
# =============================================================================
# Pre-commit Hook for Chatimics Project
# Prevents committing sensitive data and maintains code quality
# =============================================================================

# Colors
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Function to check for sensitive files
check_sensitive_files() {
    local sensitive_patterns=(
        "\.env$"
        "\.env\.local$"
        "\.key$"
        "\.pem$"
        "\.p12$"
        "\.pfx$"
        "password"
        "secret"
        "token"
        "credentials\.json$"
        "homeserver\.db"
        "homeserver\.yaml$"
        "\.log$"
    )
    
    local found_sensitive=false
    
    for pattern in "${sensitive_patterns[@]}"; do
        if git diff --cached --name-only | grep -iE "$pattern"; then
            if [[ "$found_sensitive" == false ]]; then
                echo -e "${RED}❌ Sensitive files detected in commit:${NC}"
                found_sensitive=true
            fi
            echo -e "${YELLOW}   - Files matching: $pattern${NC}"
        fi
    done
    
    if [[ "$found_sensitive" == true ]]; then
        echo ""
        echo -e "${RED}🛑 Commit blocked to protect sensitive data${NC}"
        echo ""
        echo "If you need to commit configuration files, use templates instead:"
        echo "  - .env -> .env.example"
        echo "  - homeserver.yaml -> homeserver.yaml.template"
        echo "  - credentials.json -> example_credentials.json"
        echo ""
        echo "To bypass this check (NOT recommended):"
        echo "  git commit --no-verify"
        return 1
    fi
    
    return 0
}

# Function to check for large files
check_large_files() {
    local max_size=10485760  # 10MB in bytes
    local found_large=false
    
    while IFS= read -r file; do
        if [[ -f "$file" ]]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo 0)
            if [[ $size -gt $max_size ]]; then
                if [[ "$found_large" == false ]]; then
                    echo -e "${RED}❌ Large files detected (>10MB):${NC}"
                    found_large=true
                fi
                echo -e "${YELLOW}   - $file ($(($size / 1024 / 1024))MB)${NC}"
            fi
        fi
    done <<< "$(git diff --cached --name-only)"
    
    if [[ "$found_large" == true ]]; then
        echo ""
        echo -e "${RED}🛑 Commit blocked due to large files${NC}"
        echo ""
        echo "Consider using Git LFS for large files:"
        echo "  git lfs track '*.db'"
        echo "  git lfs track 'media_store/*'"
        echo ""
        return 1
    fi
    
    return 0
}

# Main execution
echo "🔍 Running pre-commit checks..."

# Check for sensitive files
if ! check_sensitive_files; then
    exit 1
fi

# Check for large files
if ! check_large_files; then
    exit 1
fi

echo "✅ Pre-commit checks passed!"
exit 0
